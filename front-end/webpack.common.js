/**
 * COMMON WEBPACK CONFIGURATION
 */

var path = require('path');
var webpack = require('webpack');

var HtmlWebpackPlugin = require('html-webpack-plugin');
var CleanWebpackPlugin = require('clean-webpack-plugin');
var CopyWebpackPlugin = require('copy-webpack-plugin');
var ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');
var GitRevisionPlugin = require('git-revision-webpack-plugin')
// var MiniCssExtractPlugin = require("mini-css-extract-plugin");

const devMode = process.env.NODE_ENV !== 'production'

// Remove this line once the following warning goes away (it was meant for webpack loader authors not users):
// 'DeprecationWarning: loaderUtils.parseQuery() received a non-string value which can be problematic,
// see https://github.com/webpack/loader-utils/issues/56 parseQuery() will be replaced with getOptions()
// in the next major version of loader-utils.'
process.noDeprecation = true;

var gitRevisionPlugin = new GitRevisionPlugin();

module.exports = {
  entry: {
    vendor: "./src/app/vendor.ts",
    main: "./src/app/root.module.ts",
  },
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: '[name].[hash].js'
  }, // Merge with env dependent settings
  externals: {
    angular: 'angular',
  },
  module: {
    rules: [
      {
        test: /\.ts(x?)$/,
        exclude: [/node_modules/],
        use: [
          { loader: 'cache-loader' },
          {
              loader: 'thread-loader',
              options: {
                  // there should be 1 cpu for the fork-ts-checker-webpack-plugin
                  workers: require('os').cpus().length - 1,
                  poolTimeout: Infinity // set this to Infinity in watch mode - see https://github.com/webpack-contrib/thread-loader
              },
          },
          { 
              loader: 'babel-loader?cacheDirectory',
              options: {
                presets: ['@babel/preset-env'],
                plugins: ['angularjs-annotate']
              }
          },
          {
              loader: 'ts-loader',
              options: {
                  transpileOnly: true,
                  happyPackMode: true // IMPORTANT! use happyPackMode mode to speed-up compilation and reduce errors reported to webpack
              }
          }
      ]
      },
      {
        test: /\.html$/,
        exclude: [/node_modules/, path.resolve(__dirname, 'src/index.html')],
        use: [
          { loader: 'ngtemplate-loader?relativeTo=' + (path.resolve(__dirname, 'src')) },
          { loader: 'html-loader' }
        ],
      },
      {
        test: /\.(sa|sc|c)ss$/,
        use: [
          'style-loader',
          // MiniCssExtractPlugin.loader, // Per una migliore leggibilità in shell DEV si può anche disabilitare
          // devMode ? 'style-loader' : MiniCssExtractPlugin.loader,
          'css-loader',
          'sass-loader',
        ],
      },
      {
        test: /\.(eot|svg|otf|ttf|woff|woff2)$/,
        use: 'file-loader',
      },
      {
        test: /\.(jpg|png|gif)$/,
        use: [
          'file-loader',
          {
            loader: 'image-webpack-loader',
          },
        ]
      },
    ],
  },
  plugins: [

    new CleanWebpackPlugin('dist'),

    new webpack.DefinePlugin({
       'VERSION': JSON.stringify(gitRevisionPlugin.version()),
     }),

    // new webpack.HashedModuleIdsPlugin(),

    new ForkTsCheckerWebpackPlugin(),

    // new MiniCssExtractPlugin({
    //   filename: 'style.[hash].css',
    // }),

    new webpack.ProvidePlugin({
      fetch: 'exports-loader?self.fetch!whatwg-fetch',
      $: 'jquery',
      jQuery: 'jquery',
      'window.jQuery': 'jquery',
      moment: 'moment',
      __extends: 'typescript-extends'
    }),

    new CopyWebpackPlugin([{
      from: 'src/assets',
      to: 'assets',
      ignore: '.DS_Store',
    }]),

    new HtmlWebpackPlugin({
      inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
      hash: true,
      template: path.resolve(__dirname, 'src/index.html'),
      filename: 'index.html',
      chunksSortMode: 'dependency',
    }),

    new webpack.ContextReplacementPlugin(/moment[\/\\]locale$/, /it/),

  ],


  resolve: {
    alias: {
      'lodash-es': 'lodash',
    },
    extensions: ['.ts', '.js', '.json'],
    modules: ['src', 'node_modules'],
    symlinks: false, // if you don't use symlinks
  },

  target: 'web', // Make web variables accessible to webpack, e.g. window

  optimization: {
    namedModules: true,
    runtimeChunk: 'single',
    splitChunks: {
      cacheGroups: {
        commons: {
          name: 'commons',
          chunks: 'initial',
          minChunks: 2,
        }
      }
    }
  }
};